<svg id="diagram-svg" width="300" height="300"></svg>

<script type="module">
  import * as Diagramatics from 'https://cdn.jsdelivr.net/npm/diagramatics@1.5/dist/diagramatics.min.js';

  document.addEventListener('DOMContentLoaded', function() {
    const mysvg = document.getElementById('diagram-svg');
    
    const forceMagnitude =  <%= @force_magnitude_4 %>;
    const length = 10; 
    const distanceFromCenter = 4;
    const h = forceMagnitude/100
    const l = <%= @longitud_4 %>;

    function updateDiagram() {
      mysvg.innerHTML = '';

      let draw = (...diagrams) => {
        Diagramatics.draw_to_svg(mysvg, Diagramatics.diagram_combine(...diagrams));
      };

      const basePosition = Diagramatics.V2(0, 0.433); 
      const r1 = Diagramatics.rectangle(length, 0.3)
        .move_origin('bottom-left')
        .position(basePosition)
        .fill('blue');

      let horizontal = Diagramatics.line(Diagramatics.V2(0, 0), Diagramatics.V2(10, 0))
        .stroke('black').strokedasharray([5, 5]).strokewidth(2);

      const arrow_head_size = 0.15;
      let m1 = (h/3)*2
      const positionOfForce = Diagramatics.V2((1/3)*l, 1+m1); 
      const F_direction = Diagramatics.Vdir(Math.PI / 2).scale(-m1); 
      const F = Diagramatics.annotation.vector(F_direction, `${forceMagnitude} N/m`, Diagramatics.V2(1, 2.5), arrow_head_size)
        .position(positionOfForce)
        .stroke('red').strokewidth(2).fill('red');


      const positionOfForce_2 = Diagramatics.V2(0, h+1);  
      const F_direction_2 = Diagramatics.Vdir(Math.PI / 2).scale(-h); 
      const F2 = Diagramatics.annotation.vector(F_direction_2, '', Diagramatics.V2(2, 2), arrow_head_size)
        .position(positionOfForce_2)
        .stroke('red').strokewidth(2).fill('red');

      let m3 = h/3
      const positionOfForce_3 = Diagramatics.V2((2/3)*l, m3+1);  
      const F_direction_3 = Diagramatics.Vdir(Math.PI / 2).scale(-m3); 
      const F3 = Diagramatics.annotation.vector(F_direction_3, '', Diagramatics.V2(2, 2), arrow_head_size)
        .position(positionOfForce_3)
        .stroke('red').strokewidth(2).fill('red');

      const triangle_base = Diagramatics.polygon([
        Diagramatics.V2(-0.25, 0),    
        Diagramatics.V2(0.25, 0),     
        Diagramatics.V2(0, (Math.sqrt(3) / 2) * 0.5)
      ])
        .position(Diagramatics.V2(0, 0))
        .fill('black');

      const triangle_base_2 = Diagramatics.polygon([
        Diagramatics.V2(-0.25, 0),    
        Diagramatics.V2(0.25, 0),     
        Diagramatics.V2(0, (Math.sqrt(3) / 2) * 0.5)
      ])
        .position(Diagramatics.V2(length, 0))
        .fill('black');

      const triangle_force = Diagramatics.polygon([
        Diagramatics.V2(0, 0),    
        Diagramatics.V2(0, h),     
        Diagramatics.V2(l, 0)
      ])
        .position(Diagramatics.V2(0, 1))
        .strokedasharray([5]).fill('white');

      const distanceAnnotation = Diagramatics.annotation.length(Diagramatics.V2(0, -0), Diagramatics.V2(l,-0), `${l} m`, 0.8, 0.5) 
        .stroke('blue');
        
      draw(horizontal, r1,  triangle_base, triangle_base_2, triangle_force, F, F2, F3, distanceAnnotation);
    }

    updateDiagram();
  });
</script>
